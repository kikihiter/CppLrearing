c++的const和static区别
const定义的常量在超出其作用域之后其空间会被释放，而static定义的静态常量在函数执行后不会释放其存储空间。

      static表示的是静态的。类的静态成员函数、静态成员变量是和类相关的，而不是和类的具体对象相关的。即使没有具体对象，也能调用类的静态成员函数和成员变量。一般类的静态函数几乎就是一个全局函数，只不过它的作用域限于包含它的文件中。

      在C++中，static静态成员变量不能在类的内部初始化。在类的内部只是声明，定义必须在类定义体的外部，通常在类的实现文件中初始化，如：double Account::Rate=2.25;static关键字只能用于类定义体内部的声明中，定义时不能标示为static

      在C++中，const成员变量也不能在类定义处初始化，只能通过构造函数初始化列表进行，并且必须有构造函数。

      const数据成员 只在某个对象生存期内是常量，而对于整个类而言却是可变的。因为类可以创建多个对象，不同的对象其const数据成员的值可以不同。所以不能在类的声明中初始化const数据成员，因为类的对象没被创建时，编译器不知道const数据成员的值是什么。

      const数据成员的初始化只能在类的构造函数的初始化列表中进行。要想建立在整个类中都恒定的常量，应该用类中的枚举常量来实现，或者static cosnt。

 

[cpp] view plain copy
 
class Test  
{  
public:  
      Test():a(0){}  
      enum {size1=100,size2=200};  
private:  
      const int a;//只能在构造函数初始化列表中初始化  
       static int b;//在类的实现文件中定义并初始化  
      const static int c;//与 static const int c;相同。  
};  
  
int Test::b=0;//static成员变量不能在构造函数初始化列表中初始化，因为它不属于某个对象。  
cosnt int Test::c=0;//注意：给静态成员变量赋值时，不需要加static修饰符。但要加cosnt  
 

      cosnt成员函数主要目的是防止成员函数修改对象的内容。即const成员函数不能修改成员变量的值，但可以访问成员变量。当方法成员函数时，该函数只能是const成员函数。

      static成员函数主要目的是作为类作用域的全局函数。不能访问类的非静态数据成员。类的静态成员函数没有this指针，这导致：1、不能直接存取类的非静态成员变量，调用非静态成员函数2、不能被声明为virtual

关于static、const、static cosnt、const static成员的初始化问题：

1、类里的const成员初始化：

在一个类里建立一个const时，不能给他初值

 

[cpp] view plain copy
 
class foo  
{  
public:  
      foo():i(100){}  
private:  
      const int i=100;//error!!!  
};  
//或者通过这样的方式来进行初始化  
foo::foo():i(100)  
{}  
 

2、类里的static成员初始化：

      类中的static变量是属于类的，不属于某个对象，它在整个程序的运行过程中只有一个副本，因此不能在定义对象时 对变量进行初始化，就是不能用构造函数进行初始化，其正确的初始化方法是：

数据类型 类名::静态数据成员名=值；

 

[c-sharp] view plain copy
 
class foo  
{  
public:  
      foo();  
private:  
      static int i;  
};  
  
int foo::i=20;  
这表明：  
1、初始化在类体外进行，而前面不加static，以免与一般静态变量或对象相混淆  
2、初始化时不加该成员的访问权限控制符private、public等  
3、初始化时使用作用域运算符来表明它所属的类，因此，静态数据成员是类的成员而不是对象的成员。  
 

3、类里的static cosnt 和 const static成员初始化

      这两种写法的作用一样，为了便于记忆，在此值说明一种通用的初始化方法：

 

[cpp] view plain copy
 
class Test  
{  
public:  
      static const int mask1;  
      const static int mask2;  
};  
const Test::mask1=0xffff;  
const Test::mask2=0xffff;  
//它们的初始化没有区别，虽然一个是静态常量一个是常量静态。静态都将存储在全局变量区域，其实最后结果都一样。可能在不同编译器内，不同处理，但最后结果都一样。  
 

这是一个完整的例子：

 

[cpp] view plain copy
 
#ifdef A_H_  
#define A_H_  
#include <iostream>  
using namespace std;  
class A  
{  
public:  
      A(int a);  
      static void print();//静态成员函数  
private:  
      static int aa;//静态数据成员的声明  
       static const int count;//常量静态数据成员（可以在构造函数中初始化）  
       const int bb;//常量数据成员  
};  
int A::aa=0;//静态成员的定义+初始化  
const int A::count=25;//静态常量成员定义+初始化  
A::A(int a):bb(a)//常量成员的初始化  
{  
      aa+=1;  
}  
void A::print()  
{  
      cout<<"count="<<count<<endl;  
      cout<<"aa="<<aa<<endl;  
}  
#endif  
void main()  
{  
      A a(10);  
      A::print();//通过类访问静态成员函数  
      a.print();//通过对象访问静态成员函数  
}  
